#!/usr/bin/python3
import os
import io
import sys
import zipfile
import requests

LANG_MAP = {
	"cpp": '#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n\t\n\treturn 0;\n}\n',
	"python": 'import sys\n\n'
}

LANG_EXT = {
	"cpp": ".cpp",
	"python": ".py"
}

URL = "https://open.kattis.com/problems/"

def usage(id = 0):
	if id == 0:
		print("Usage: kattis <command> [arguments] [options]\n")
		print("Commands:")
		for command in commands:
			print("\t{}\t{}".format(command, commands[command].__doc__))
	elif id == 1:
		print("Usage: kattis init <problem id> <language(cpp, python)> [options]")

def init(args):
	"""Download a problem and sample data from Kattis"""

	if len(args < 2):
		usage(1)
		return 1

	problem, lang = args[0].lower(), args[1].lower()

	try:
		r = requests.get(URL + problem + "/file/statement/samples.zip", stream=True)
		z = zipfile.ZipFile(io.BytesIO(r.content))
	except:
		print("Unable to find problem \"" + problem + '"')
		return 1

	if not os.path.exists("problems/" + problem):
		os.mkdir("problems/" + problem)

	if not os.path.exists("problems/" + problem + "/samples"):
		os.mkdir("problems/" + problem + "/samples")

	if lang not in LANG_MAP:
		print("'" + lang + "' is not a valid language. Available languages: "
	          + ", ".join(list(LANG_MAP.keys())))
		return 1

	z.extractall("problems/" + problem + "/samples/")

	f = open("problems/" + problem + "/" + problem + LANG_EXT[lang], "w")
	f.write(LANG_MAP[lang])
	f.close()


def test(args):
	"""Test your program against all of the sample data (won't work with variable answers)"""
	pass



commands = {
	'init': init,
	'test': test
}

def main(argv):

	if len(argv) < 2 or argv[1] not in commands:
		usage()
		return 1
	else:
		return commands[argv[1]](argv[2:])


if __name__ == '__main__':
	sys.exit(main(sys.argv))
